Lesson 2 reflections

1. What happens when you initialize a repository? Why do you need to do it?

  A hidden folder called '.git' will be created when I initialize a repository with 'git init'. I have to initialize a repository in order to use git to do version control.
  
2. How is the staging area different from the working directory and the repository? What value do you think it offers?  

  Staging area is an intermediate place between working directory and repository. You can add files to be committed into the staging area. You can put multiple files into staging area and commit them all at once. You can also remove files from staing area using 'git reset' before making commits. Staging area provides some kinds of flexibility for commit.
  
3. How can you use the staging area to make sure you have one commit per logical change?

  We can put multiple files in the staging area after one logical change to these files, then commit all of them. 
  
4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?

  When I create another line of changes and want to keep the main line of work unaffected, I can create a new branch. 
  
5. How do the diagrams help you visualize the branch structure?

  The diagrams display the branch structures, how does each branch look like, the link relationship, the commits in the history of each branch.
  
6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

  We will get one branch with changes from two sources. It is intuitive to see the commits history as a tree structure.
  
7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

  Most of the cases, there are no conflicts, so Git can do the merge automatically, which saves users a lot of time. When there is conflicts, Git will ask the user to fix the conflicts.    
  
  
  